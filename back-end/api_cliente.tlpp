#include 'totvs.ch'
#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include 'protheus.ch'

Class TAB_CLIENTES from fwAdapterBaseV2
    public method new() constructor
    
    @post(endpoint='/v1/clientes/incluir',;
        description='Metodo inserção de clientes')
    public method novo_cliente() as logical
    
    @get(endpoint='/v1/clientes/listar',;
        description='Metodo listagem de todos os clientes')
    public method listar_clientes() as logical

    @get(endpoint='/v1/clientes/:codigo',;
        description='Metodo detalhamento cliente especifico')
    public method get_cliente() as logical

    @put(endpoint='/v1/clientes/atualizar/:codigo/:loja',;
        description="Método para atualizar um cliente")
    public method atualiza_cliente() as logical

    @delete(endpoint="/v1/clientes/deletar/:codigo/:loja",;
        description="Método para deletar um cliente")
    public method deletar_cliente() as logical
 
    @get(endpoint="/v1/clientes/ultimoCodigo",;
        description="Método para pegar o ultimo codigo de cliente cadastrado")
    public method get_last_code() as logical

    @get(endpoint="/v1/clientes/municipiosporestado/:estado",;
        description="Método para pegar os municipios de um estado")
    public method get_munPorEstado() as logical

    @get(endpoint="/v1/clientes/codigomunicipio/:estado/:municipio",;
        description="Método para pegar os municipios de um estado")
    public method get_municipio_estado() as logical

End Class

Method new() Class TAB_CLIENTES
Return self

Method listar_clientes() class TAB_CLIENTES
    Local lRPC          as logical
    Local nError        as numeric
    Local cError        as character
    Local jResult       as json  
    Local jHeaderReq    as json
    Local jQueryPar     as json
    Local oQuery        as object
    Local cQuery        as character
    Local cWhere        as character
    Local cOrder        as character
    Local cTabela       as character
    Local jHeaderRes    as json

    cTabela := "SA1" 
    cQuery  := ""
    cWhere  := ""
    cOrder  := ""
 
    Try
        jHeaderReq := oRest:getHeaderRequest()
        jQueryPar  := oRest:getQueryRequest()
        jHeaderRes := jsonObject():new()
        jHeaderRes['Content-Type'] := 'application/json'

        oQuery := fwAdapterBaseV2():new('GET',.t.)
        oQuery:setPageSize(645)

        cQuery += "SELECT #QueryFields# FROM ("
        cQuery += CRLF +" SELECT * FROM " +RetSQLName(cTabela) +" "+cTabela+") "+cTabela
        cQuery += CRLF +" WHERE #QueryWhere# "

        cWhere += "D_E_L_E_T_ = ' '"

        cOrder += 'A1_COD,A1_LOJA ASC'

        oQuery:AddMapFields('codigo','A1_COD',.T.,.T.)
        oQuery:AddMapFields('loja','A1_LOJA',.T.,.T.)
        oQuery:AddMapFields('razao','A1_NOME',.T.,.T.)
        oQuery:AddMapFields('tipo','A1_PESSOA',.T.,.T.)
        oQuery:AddMapFields('cnpj','A1_CGC',.T.,.T.)
        oQuery:AddMapFields('endereco','A1_END',.T.,.T.)
        oQuery:AddMapFields('bairro','A1_BAIRRO',.T.,.T.)
        oQuery:AddMapFields('cidade','A1_MUN',.T.,.T.)
        oQuery:AddMapFields('estado','A1_EST',.T.,.T.)
        oQuery:AddMapFields('cep','A1_CEP',.T.,.T.)
	    oQuery:AddMapFields('ddd','A1_DDD',.T.,.T.)             
	    oQuery:AddMapFields('tel','A1_TEL',.T.,.T.)              
	    oQuery:AddMapFields('email','A1_EMAIL',.T.,.T.)       
	    oQuery:AddMapFields('hpage','A1_HPAGE',.T.,.T.)        
	    oQuery:AddMapFields('mun','A1_MUN',.T.,.T.)             
	    oQuery:AddMapFields('pais','A1_PAIS',.T.,.T.)        
	    oQuery:AddMapFields('pfisica','A1_PFISICA',.T.,.T.)  
	    oQuery:AddMapFields('dtcad','A1_DTCAD',.T.,.T.)      
	    oQuery:AddMapFields('est','A1_EST',.T.,.T.)              
	    oQuery:AddMapFields('cgc','A1_CGC',.T.,.T.)             
	    oQuery:AddMapFields('contato','A1_CONTATO',.T.,.T.)  
	    oQuery:AddMapFields('obs','A1_OBS',.T.,.T.)         
	    oQuery:AddMapFields('complem','A1_COMPLEM',.T.,.T.)  
        oQuery:AddMapFields('rgoucadest', 'A1_INSCR',.T.,.T.)

        oQuery:setQuery(cQuery)
        oQuery:setWhere(cWhere)
        oQuery:setOrder(cOrder)
 
        If oQuery:execute()
            oQuery:fillGetResponse()
            oRest:setResponse(oQuery:getJsonResponse())
        Else
            nError := ::getCode()
            cError := ::getMessage()
 
            jResult := jsonObject():new()
            jResult['error'] := cError
 
            oRest:setFault(jResult:toJson())
        EndIf
 
    Catch err
        cError            := err:errorstack
        jResult           := jsonObject():new()
        jResult['error']  := cError
        oRest:setFault(jResult:toJson())
    EndTry

    If lRPC
        RpcClearEnv()
    EndIf
Return .T.

Method get_cliente() class TAB_CLIENTES
    Local lRPC          as logical
    Local nError        as numeric
    Local cError        as character
    Local jResult       as json  
    Local jHeaderReq    as json
    Local jQueryPar     as json
    Local oQuery        as object
    Local cQuery        as character
    Local cWhere        as character
    Local cOrder        as character
    Local cTabela       as character
    Local jHeaderRes    as json

    cTabela := "SA1" 
    cQuery  := ""
    cWhere  := ""
    cOrder  := ""
 
    Try
        jPath := oRest:getPathParamsRequest()
        jHeaderReq := oRest:getHeaderRequest()
        jQueryPar  := oRest:getQueryRequest()
        jHeaderRes := jsonObject():new()
        jHeaderRes['Content-Type'] := 'application/json'

        oQuery := fwAdapterBaseV2():new('GET',.t.)
        oQuery:setPageSize(645)

        cQuery += "SELECT #QueryFields# FROM ("
        cQuery += CRLF +" SELECT * FROM " +RetSQLName(cTabela) +" "+cTabela+") "+cTabela
        cQuery += CRLF +" WHERE #QueryWhere# "

        cWhere += " A1_COD = "+ jPath['codigo'] +" AND D_E_L_E_T_ = ' '"

        cOrder += 'A1_COD,A1_LOJA ASC'

        oQuery:AddMapFields('codigo','A1_COD',.T.,.T.)
        oQuery:AddMapFields('loja','A1_LOJA',.T.,.T.)
        oQuery:AddMapFields('razao','A1_NOME',.T.,.T.)
        oQuery:AddMapFields('tipo','A1_PESSOA',.T.,.T.)
        oQuery:AddMapFields('cnpj','A1_CGC',.T.,.T.)
        oQuery:AddMapFields('endereco','A1_END',.T.,.T.)
        oQuery:AddMapFields('bairro','A1_BAIRRO',.T.,.T.)
        oQuery:AddMapFields('cidade','A1_MUN',.T.,.T.)
        oQuery:AddMapFields('estado','A1_EST',.T.,.T.)
        oQuery:AddMapFields('cep','A1_CEP',.T.,.T.)
	    oQuery:AddMapFields('ddd','A1_DDD',.T.,.T.)             
	    oQuery:AddMapFields('tel','A1_TEL',.T.,.T.)              
	    oQuery:AddMapFields('email','A1_EMAIL',.T.,.T.)       
	    oQuery:AddMapFields('hpage','A1_HPAGE',.T.,.T.)        
	    oQuery:AddMapFields('mun','A1_MUN',.T.,.T.)             
	    oQuery:AddMapFields('pais','A1_PAIS',.T.,.T.)        
	    oQuery:AddMapFields('pfisica','A1_PFISICA',.T.,.T.)  
	    oQuery:AddMapFields('dtcad','A1_DTCAD',.T.,.T.)      
	    oQuery:AddMapFields('est','A1_EST',.T.,.T.)              
	    oQuery:AddMapFields('cgc','A1_CGC',.T.,.T.)             
	    oQuery:AddMapFields('contato','A1_CONTATO',.T.,.T.)  
	    oQuery:AddMapFields('obs','A1_OBS',.T.,.T.)         
	    oQuery:AddMapFields('complem','A1_COMPLEM',.T.,.T.)  
        oQuery:AddMapFields('rgoucadest', 'A1_INSCR',.T.,.T.)

        oQuery:setQuery(cQuery)
        oQuery:setWhere(cWhere)
        oQuery:setOrder(cOrder)
 
        If oQuery:execute()
            oQuery:fillGetResponse()
            oRest:setResponse(oQuery:getJsonResponse())
        Else
            nError := ::getCode()
            cError := ::getMessage()
 
            jResult := jsonObject():new()
            jResult['error'] := cError
 
            oRest:setFault(jResult:toJson())
        EndIf
 
    Catch err
        cError            := err:errorstack
        jResult           := jsonObject():new()
        jResult['error']  := cError
        oRest:setFault(jResult:toJson())
    EndTry

    If lRPC
        RpcClearEnv()
    EndIf
Return .T.

Method get_last_code() class TAB_CLIENTES
    Local lRPC          as logical
    Local nError        as numeric
    Local cError        as character
    Local jResult       as json  
    Local jHeaderReq    as json
    Local jQueryPar     as json
    Local oQuery        as object
    Local cQuery        as character
    Local cWhere        as character
    Local cOrder        as character
    Local cTabela       as character
    Local jHeaderRes    as json

    cTabela := "SA1" //Cadastro de Clientes
    cQuery  := ""
    cWhere  := ""
    cOrder  := ""
 
    If Type('cEmpAnt') <> 'C'
        RpcSetEnv('99','01')
        lRPC := .T.
    EndIf

    Try
        jHeaderReq := oRest:getHeaderRequest()
        jQueryPar  := oRest:getQueryRequest()

        jHeaderRes := jsonObject():new()
        jHeaderRes['Content-Type'] := 'application/json'

        oQuery := fwAdapterBaseV2():new('GET',.t.)

        cQuery += "SELECT #QueryFields# FROM ("
        cQuery += CRLF +" SELECT * FROM " +RetSQLName(cTabela) +" "+cTabela+") "+cTabela
        cQuery += CRLF +" WHERE #QueryWhere# "

        cWhere += "D_E_L_E_T_ = ' '"
        cOrder += 'A1_COD DESC'

        oQuery:AddMapFields('codigo','A1_COD',.T.,.T.)

        oQuery:setQuery(cQuery)
        oQuery:setWhere(cWhere)
        oQuery:setOrder(cOrder)
 
        If oQuery:execute()
            oQuery:fillGetResponse()
            oRest:setResponse(oQuery:getJsonResponse())
        Else
            nError := ::getCode()
            cError := ::getMessage()
 
            jResult := jsonObject():new()
            jResult['error'] := cError
 
            oRest:setFault(jResult:toJson())
        EndIf
 
    Catch err
        cError            := err:errorstack
        jResult           := jsonObject():new()
        jResult['error']  := cError
        oRest:setFault(jResult:toJson())
    EndTry

    If lRPC
        RpcClearEnv()
    EndIf
Return .T.

Method get_munPorEstado() class TAB_CLIENTES
    Local lRPC          as logical
    Local nError        as numeric
    Local cError        as character
    Local jResult       as json  
    Local jHeaderReq    as json
    Local jQueryPar     as json
    Local oQuery        as object
    Local cQuery        as character
    Local cWhere        as character
    Local cOrder        as character
    Local cTabela       as character
    Local jHeaderRes    as json
    Local cEstado       as character

    cTabela := "CC2" 
    cQuery  := ""
    cWhere  := ""
    cOrder  := ""

    jPath := oRest:getPathParamsRequest()
    
    If (jPath <> Nil)
        cEstado := jPath['estado']
    Else
        jResult := jsonObject():new()
        jResult['error'] := "Estado não informado."
        oRest:setFault(jResult:toJson())
        Return .F.
    EndIf

    Try
        jHeaderReq := oRest:getHeaderRequest()
        jQueryPar  := oRest:getQueryRequest()

        jHeaderRes := jsonObject():new()
        jHeaderRes['Content-Type'] := 'application/json'

        oQuery := fwAdapterBaseV2():new('GET',.t.)
        oQuery:setPageSize(645)

        // FOR i IN 1 TO 65
        // END

        cQuery += "SELECT #QueryFields# FROM ("
        cQuery += CRLF +" SELECT * FROM " +RetSQLName(cTabela) +" "+cTabela+" ) "+cTabela
        cQuery += CRLF +" WHERE #QueryWhere#"

        cWhere += "CC2_EST = "+ cEstado +" "
        cOrder += 'CC2_MUN ASC'


        oQuery:AddMapFields('codigo','CC2_CODMUN',.T.,.T.)
        oQuery:AddMapFields('municipio','CC2_MUN',.T.,.T.)

        oQuery:setQuery(cQuery)
        oQuery:setWhere(cWhere)
        oQuery:setOrder(cOrder)

        If oQuery:execute()
            oQuery:fillGetResponse()
            oRest:setResponse(oQuery:getJsonResponse())
        Else
            nError := ::getCode()
            cError := ::getMessage()

            jResult := jsonObject():new()
            jResult['error'] := cError

            oRest:setFault(jResult:toJson())
        EndIf

    Catch err
        cError            := err:errorstack
        jResult           := jsonObject():new()
        jResult['error']  := cError
        oRest:setFault(jResult:toJson())
    EndTry

    If lRPC
        RpcClearEnv()
    EndIf
Return .T.

Method get_municipio_estado() class TAB_CLIENTES
    Local lRPC          as logical
    Local nError        as numeric
    Local cError        as character
    Local jResult       as json  
    Local jHeaderReq    as json
    Local jQueryPar     as json
    Local oQuery        as object
    Local cQuery        as character
    Local cWhere        as character
    Local cOrder        as character
    Local cTabela       as character
    Local jHeaderRes    as json
    Local cEstado       as character
    Local cMunicipio    as character

    cTabela := "CC2" 
    cQuery  := ""
    cWhere  := ""
    cOrder  := ""

    jPath := oRest:getPathParamsRequest()
    
    If (jPath <> Nil)
        cEstado    := jPath['estado']
        cMunicipio := jPath['municipio']
    Else
        jResult := jsonObject():new()
        jResult['error'] := "Estado ou municipio não informadoS."
        oRest:setFault(jResult:toJson())
        Return .F.
    EndIf

    Try
        jHeaderReq := oRest:getHeaderRequest()
        jQueryPar  := oRest:getQueryRequest()

        jHeaderRes := jsonObject():new()
        jHeaderRes['Content-Type'] := 'application/json'

        oQuery := fwAdapterBaseV2():new('GET',.t.)
        oQuery:setPageSize(1)

        cQuery += "SELECT #QueryFields# FROM ("
        cQuery += CRLF +" SELECT * FROM " +RetSQLName(cTabela) +" "+cTabela+" ) "+cTabela
        cQuery += CRLF +" WHERE #QueryWhere#"

        cWhere += "CC2_EST = "+ cEstado +" AND CC2_MUN = "+ cMunicipio +" "
        cOrder += 'CC2_MUN ASC'


        oQuery:AddMapFields('codigo','CC2_CODMUN',.T.,.T.)
        oQuery:AddMapFields('municipio','CC2_MUN',.T.,.T.)

        oQuery:setQuery(cQuery)
        oQuery:setWhere(cWhere)
        oQuery:setOrder(cOrder)

        If oQuery:execute()
            oQuery:fillGetResponse()
            oRest:setResponse(oQuery:getJsonResponse())
        Else
            nError := ::getCode()
            cError := ::getMessage()

            jResult := jsonObject():new()
            jResult['error'] := cError

            oRest:setFault(jResult:toJson())
        EndIf

    Catch err
        cError            := err:errorstack
        jResult           := jsonObject():new()
        jResult['error']  := cError
        oRest:setFault(jResult:toJson())
    EndTry

    If lRPC
        RpcClearEnv()
    EndIf
Return .T.

Method atualiza_cliente() class TAB_CLIENTES
    Local lRPC          as logical
    Local lRet          as logical
    Local jQueryParams  as json
    Local jHeaderReq    as json
    Local jHeaderRes    as json
    Local jBodyReq      as json    
    Local cMsgLog       as character
    Local jResult       as json
    Local cError        as character  

    Private lMsErroAuto as logical

    Try
        jHeaderRes                  := jsonObject():new()
        jHeaderRes['Content-Type']  := 'application/json'  

        jQueryParams                := oRest:getQueryRequest()
        jHeaderReq                  := oRest:getHeaderRequest()

        jBodyReq                    := jsonObject():new()
        jBodyReq:fromJson(oRest:getBodyRequest())      

        // lRet                        := altera_cliente(@jBodyReq,@cMsgLog)  
        lRet := .T.
        If lRet
            jResult := jsonObject():new()
            jResult['resultado'] := "Alterado com Sucesso"
            oRest:setResponse(jResult:toJson())
        Else
            oRest:setStatusCode(500)
            oRest:setFault(cMsgLog)
        EndIf  

    Catch err
        cError          := err:description
        jResult         := jsonObject():new()
        jResult['error']:= cError
        oRest:setFault(jResult:toJson())        
    EndTry

    If lRPC
        RpcClearEnv()
    EndIf
Return .T.

Method deletar_cliente() class TAB_CLIENTES
	Local lRPC 		as logical
    Local lRet      as logical

	Local cError 	as character
	Local jResp  	as json
	Local cCodigo   as character
	Local cLoja		as character

    Local jQueryParams  as json
    Local jHeaderReq    as json
    Local jHeaderRes    as json 
    Local aDados        as array

	Private err 	as object

	try

		jHeaderRes                  := jsonObject():new()
		jHeaderRes['Content-Type']  := 'application/json'


        jPath := oRest:getPathParamsRequest()
        
        cCodigo := jPath["codigo"]
        cLoja := jPath["loja"]

		jQueryParams := oRest:getQueryRequest()
		jHeaderReq := oRest:getHeaderRequest()  

   		SA1->(dbSetOrder(1),dbSeek(xFilial(alias())+cCodigo+cLoja))
		If SA1->(Found())
			aDados := array(0) 
			AADD(aDados,{"A1_COD", cCodigo,Nil})
			AADD(aDados,{"A1_LOJA", cLoja,Nil})

			lMsErroAuto := .F. 
			lret        := .T. 

			MsExecAuto({|x,y| MATA030(x,y)},aDados,5)   

			If lMsErroAuto
       			return .F.
			EndIf

			jResp := jsonObject():new()
			jResp['retorno'] := 'Registro excluído com sucesso!'	
			oRest:setResponse(jResp:toJson())	 
		Else
			err := errorClass():new()
			err:description := 'Fornecedor não encontrado.'
			throw err
		EndIf
	catch err

		cError          := err:description
		jResp           := jsonObject():new()
		jResp['error']  := cError

		oRest:setStatusCode(500)
		oRest:setFault(jResp:toJson())     	
	endtry

	If lRPC
		RpcClearEnv()
	EndIf	
Return .T.

Method novo_cliente() class TAB_CLIENTES

    Local jQueryParams  as json
    Local jHeaderReq    as json
    Local jHeaderRes    as json
    Local jBodyReq      as json    
    Local cMsgLog       as character

    jHeaderRes                  := jsonObject():new()
    jHeaderRes['Content-Type']  := 'application/json'  

    jQueryParams                := oRest:getQueryRequest()
    jHeaderReq                  := oRest:getHeaderRequest()

    jBodyReq                    := jsonObject():new()
    jBodyReq:fromJson(oRest:getBodyRequest())      

    lret                        := grava_cliente(@jBodyReq,@cMsgLog)  

    IF lret
        oRest:setResponse(jBodyReq:toJson())
    Else
        oRest:setStatusCode(500)
        oRest:setFault(cMsgLog)
    EndIF             

return .T.

Static Function grava_cliente(jCliente as json, cMsgLog as character) as logical

    Local ccodigo     as character
    Local cloja       as character
    Local crazao      as character
    Local ctipo       as character
    Local ccnpj       as character
    Local cendereco   as character
    Local cbairro     as character
    Local ccidade     as character
    Local cestado     as character
    Local ccep        as character
    Local cddd        as character
    Local ctel        as character
    Local cemail      as character
    Local chpage      as character
    Local cpais       as character
    Local cdtcad      as character
    Local ccomplem    as character
    Local cobs        as character

    Local x           as variant
    Local xAutoCab	  := {}
    Private lMsErroAuto as logical 
     
    ccodigo     := jCliente['codigo'] 
    cloja       := jCliente['loja'] 
    crazao      := jCliente['razao'] 
    ctipo       := jCliente['tipo'] 
    ccnpj       := jCliente['cnpj'] 
    cendereco   := jCliente['endereco'] 
    cbairro     := jCliente['bairro'] 
    ccidade     := jCliente['cidade'] 
    cestado     := jCliente['est'] 
    ccep        := jCliente['cep'] 
	cddd        := jCliente['ddd'] 
	ctel        := jCliente['tel'] 
	cemail      := jCliente['email'] 
	chpage      := jCliente['hpage'] 
	cpais       := jCliente['pais'] 
	cdtcad      := jCliente['dtcad'] 
	cobs        := jCliente['obs'] 
	ccomplem    := jCliente['complem'] 

    AADD(xAutoCab,{"A1_COD",    ccodigo   , Nil}) 
    AADD(xAutoCab,{"A1_LOJA",   cloja     , Nil}) 
    AADD(xAutoCab,{"A1_NOME",   crazao    , Nil}) 
    AADD(xAutoCab,{"A1_NREDUZ", crazao    , Nil})    
    AADD(xAutoCab,{"A1_END",    cendereco , Nil}) 
    AADD(xAutoCab,{"A1_TIPO",   "F"       , Nil})   
    AADD(xAutoCab,{"A1_EST",    cestado   , Nil}) 
    AADD(xAutoCab,{"A1_MUN",    ccidade   , Nil}) 
    AADD(xAutoCab,{"A1_CGC",    ccnpj     , Nil})
    AADD(xAutoCab,{"A1_BAIRRO",  cbairro  , Nil})
    AADD(xAutoCab,{"A1_CEP",     ccep     , Nil})
    AADD(xAutoCab,{"A1_DDD",     cddd     , Nil})
    AADD(xAutoCab,{"A1_TEL",     ctel     , Nil})
    AADD(xAutoCab,{"A1_EMAIL",   cemail   , Nil})
    AADD(xAutoCab,{"A1_HPAGE",   chpage   , Nil})
    AADD(xAutoCab,{"A1_PAIS",    "105"    , Nil})
    AADD(xAutoCab,{"A1_OBS",     cobs     , Nil})
    AADD(xAutoCab,{"A1_COMPLEM", ccomplem , Nil})

If Len(ccnpj) <= 11
        AADD(xAutoCab,{"A1_PESSOA", "F" , Nil})
    Else
        AADD(xAutoCab,{"A1_PESSOA", "J" , Nil})
    EndIf
    	
    // AADD(xAutoCab,{"A1_DTNASC",   cdtcad   , Nil})
 
    BeginTran()  
    lMsErroAuto := .F.   

    MsExecAuto({|x,y| MATA030(x,y)}, xAutoCab, 3)

    If lMsErroAuto      
        DisarmTransaction()   
        Alert("Ocorreu um Erro!!!")
        MsUnlockAll()
        Return .F.
    Else
        MsgInfo("Atualizado com Sucesso!!")     
        EndTran()   
    EndIf

    MsUnlockAll()
Return .T.     


Static Function altera_cliente(jCliente as json, cMsgLog as character) as logical
    Local cCodigo     as character
    Local cRazao      as character
    Local cTipo       as character
    Local cEndereco   as character
    Local cBairro     as character
    Local cCidade     as character
    Local cEstado     as character
    Local cCep        as character
    Local cDdd        as character
    Local cTel        as character
    Local cEmail      as character
    Local cHpage      as character
    Local cPais       as character
    Local cDtCad      as character
    Local cComplem    as character
    Local cObs        as character
    Local cLoja       as character

    Local xAutoCab    := {}
    Private lMsErroAuto as logical 

    // Captura os parâmetros da URL via oRest:getPathParamsRequest()
    jPath := oRest:getPathParamsRequest()

    // Atribuição das variáveis com valores do JSON
    cRazao      := jCliente['razao'] 
    cTipo       := jCliente['tipo'] 
    cEndereco   := jCliente['endereco'] 
    cBairro     := jCliente['bairro'] 
    cCidade     := jCliente['cidade'] 
    cEstado     := jCliente['estado'] // Verifique se `estado` é a chave correta
    cCep        := jCliente['cep'] 
    cDdd        := jCliente['ddd'] 
    cTel        := jCliente['tel'] 
    cEmail      := jCliente['email'] 
    cHpage      := jCliente['hpage'] 
    cPais       := jCliente['pais'] 
    cDtCad      := jCliente['dtcad'] 
    cObs        := jCliente['obs'] 
    cComplem    := jCliente['complem'] 

    cLoja       := jPath['loja']
    cCodigo     := jPath['codigo']

    AADD(xAutoCab, {"A1_NOME",   cRazao,    Nil}) 
    AADD(xAutoCab, {"A1_NREDUZ", cRazao,    Nil})    
    AADD(xAutoCab, {"A1_END",    cEndereco, Nil}) 
    AADD(xAutoCab, {"A1_TIPO",   "F",       Nil})   // Valor fixo "F"
    AADD(xAutoCab, {"A1_EST",    cEstado,   Nil}) 
    AADD(xAutoCab, {"A1_MUN",    cCidade,   Nil}) 
    AADD(xAutoCab, {"A1_BAIRRO", cBairro,   Nil})
    AADD(xAutoCab, {"A1_CEP",    cCep,      Nil})
    AADD(xAutoCab, {"A1_DDD",    cDdd,      Nil})
    AADD(xAutoCab, {"A1_TEL",    cTel,      Nil})
    AADD(xAutoCab, {"A1_EMAIL",  cEmail,    Nil})
    AADD(xAutoCab, {"A1_HPAGE",  cHpage,    Nil})
    AADD(xAutoCab, {"A1_OBS",    cObs,      Nil})
    AADD(xAutoCab, {"A1_COMPLEM",cComplem,  Nil})

   	SA1->(dbSetOrder(1),dbSeek(xFilial(alias())+cCodigo+cLoja))
		If SA1->(Found())
			aDados := array(0) 
			AADD(aDados,{"A1_COD", cCodigo,Nil})
			AADD(aDados,{"A1_LOJA", cLoja,Nil})

			lMsErroAuto := .F. 
			lret        := .T. 

			MsExecAuto({|x,y| MATA030(x,y)},aDados,4)   

			If lMsErroAuto
       			return .F.
			EndIf

			jResp := jsonObject():new()
			jResp['retorno'] := 'Registro alterado com sucesso!'	
			oRest:setResponse(jResp:toJson())	 
		Else
			err := errorClass():new()
			err:description := 'Fornecedor não encontrado.'
			throw err
		EndIf

    MsUnlockAll()
    Return .T.
   
